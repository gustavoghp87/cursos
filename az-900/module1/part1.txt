High availability: Depending on the service-level agreement (SLA) that you choose, your cloud-based apps can provide a continuous user experience with no apparent downtime, even when
 things go wrong.

Scalability: Apps in the cloud can scale vertically and horizontally:

Scale vertically to increase compute capacity by adding RAM or CPUs to a virtual machine.
 Scaling horizontally increases compute capacity by adding instances of resources, such as adding VMs to the configuration.
 Elasticity: You can configure cloud-based apps to take advantage of autoscaling, so your apps always have the resources they need.

Agility: Deploy and configure cloud-based resources quickly as your app requirements change.

Geo-distribution: You can deploy apps and data to regional datacenters around the globe, thereby ensuring that your customers always have the best performance in their region.

Disaster recovery: By taking advantage of cloud-based backup services, data replication, and geo-distribution, you can deploy your apps with the confidence that comes from knowing that
 your data is safe in the event of disaster.


-IaaS: This cloud service model is the closest to managing physical servers; a cloud provider will keep the hardware up-to-date, but operating system maintenance and network
 configuration is up to you as the cloud tenant.
 No CapEx. Agility. Management. Consumption-based model. Skills. Cloud benefits. Flexibility

-PaaS: This cloud service model is a managed hosting environment. The cloud provider manages the virtual machines and networking resources, and the cloud tenant deploys their
 applications into the managed hosting environment.
 Platform limitations: There can be some limitations to a cloud platform that might affect how an application runs. When you're evaluating which PaaS platform is best suited for a
 workload, be sure to consider any limitations in this area.

-SaaS: In this cloud service model, the cloud provider manages all aspects of the application environment, such as virtual machines, networking resources, data storage, and applications.
 The cloud tenant only needs to provide their data to the application managed by the cloud provider.
 Disadvantage: Software limitations. There can be some limitations to a software application that might affect how users work. Because you're using as-is software, you don't have
 direct control of features.




AZURE

Organizing structure for resources in Azure, which has four levels: management groups, subscriptions, resource groups, and resources.

-Resources: Resources are instances of services that you create, like virtual machines, storage, or SQL databases.

-Resource groups: Resources are combined into resource groups, which act as a logical container into which Azure resources like web apps, databases, and storage accounts are deployed and
 managed.

-Subscriptions: A subscription groups together user accounts and the resources that have been created by those user accounts. For each subscription, there are limits or quotas on the
 amount of resources that you can create and use. Organizations can use subscriptions to manage costs and the resources that are created by users, teams, or projects.

-Management groups: These groups help you manage access, policy, and compliance for multiple subscriptions. All subscriptions in a management group automatically inherit the conditions
 applied to the management group.


Availability zones are physically separate datacenters within an Azure region. Each availability zone is made up of one or more datacenters equipped with independent power, cooling, and
 networking. An availability zone is set up to be an isolation boundary. If one zone goes down, the other continues working. Availability zones are connected through high-speed, private
 fiber-optic networks.

Availability zones are primarily for VMs, managed disks, load balancers, and SQL databases. Azure services that support availability zones fall into three categories:

-Zonal services: You pin the resource to a specific zone (for example, VMs, managed disks, IP addresses).

-Zone-redundant services: The platform replicates automatically across zones (for example, zone-redundant storage, SQL Database).

-Non-regional services: Services are always available from Azure geographies and are resilient to zone-wide outages as well as region-wide outages.

Azure region pairs: Each Azure region is always paired with another region within the same geography (such as US, Europe, or Asia) at least 300 miles away. If a region in a pair was
 affected by a natural disaster, for instance, services would automatically failover to the other region in its region pair.


RBAC: role-based access control

The benefits of using Resource Manager
-Manage your infrastructure through declarative templates rather than scripts. A Resource Manager template is a JSON file that defines what you want to deploy to Azure.
-Deploy, manage, and monitor all the resources for your solution as a group, rather than handling these resources individually.
-Redeploy your solution throughout the development life cycle and have confidence your resources are deployed in a consistent state.
-Define the dependencies between resources so they're deployed in the correct order.
-Apply access control to all services because RBAC is natively integrated into the management platform.
-Apply tags to resources to logically organize all the resources in your subscription.
-Clarify your organization's billing by viewing costs for a group of resources that share the same tag.


An account can have one subscription or multiple subscriptions that have different billing models and to which you apply different access-management policies.
You can use Azure subscriptions to define boundaries around Azure products, services, and resources. There are two types of subscription boundaries that you can use:

-Billing boundary: This subscription type determines how an Azure account is billed for using Azure. You can create multiple subscriptions for different types of billing requirements.
 Azure generates separate billing reports and invoices for each subscription so that you can organize and manage costs.
-Access control boundary: Azure applies access-management policies at the subscription level, and you can create separate subscriptions to reflect different organizational structures. An
 example is that within a business, you have different departments to which you apply distinct Azure subscription policies. This billing model allows you to manage and control access to
 the resources that users provision with specific subscriptions.

You might want to create additional subscriptions for resource or billing management purposes. For example, you might choose to create additional subscriptions to separate:
-Environments: When managing your resources, you can choose to create subscriptions to set up separate environments for development and testing, security, or to isolate data for
 compliance reasons. This design is particularly useful because resource access control occurs at the subscription level.
-Organizational structures: You can create subscriptions to reflect different organizational structures. For example, you could limit a team to lower-cost resources, while allowing the
 IT department a full range. This design allows you to manage and control access to the resources that users provision within each subscription.
-Billing: You might want to also create additional subscriptions for billing purposes. Because costs are first aggregated at the subscription level, you might want to create
 subscriptions to manage and track costs based on your needs. For instance, you might want to create one subscription for your production workloads and another subscription for your
 development and testing workloads.


Azure Active Directory (Azure AD). All subscriptions within a single management group must trust the same Azure AD tenant.



















