-Visual tools provide full, visually friendly access to all the functionality of Azure. However, visual tools might be less useful when you're trying to set up a large deployment of
 resources with interdependencies and configuration options.

-When you're attempting to quickly set up and configure Azure resources, a code-based tool is usually the better choice.
 There are two approaches to infrastructure as code: imperative code and declarative code.
  Imperative code details each individual step that should be performed to achieve a desired outcome. By contrast, declarative code details only a desired outcome, and it allows an
   interpreter to decide how to best achieve that outcome.
  This distinction is important because tools that are based on declarative code can provide a more robust approach to deploying dozens or hundreds of resources simultaneously and
   reliably.


1. The Azure portal:
 Web-based UI

2. The Azure mobile app:
 -Monitor the health and status of your Azure resources.
 -Check for alerts, quickly diagnose and fix issues, and restart a web app or virtual machine (VM).
 -Run the Azure CLI or Azure PowerShell commands to manage your Azure resources.

3. Azure PowerShell:
Azure PowerShell is a shell with which developers and DevOps and IT professionals can execute commands called cmdlets (pronounced command-lets). These commands call the Azure Rest API
 to perform every possible management task in Azure. Cmdlets can be executed independently or combined into a script file and executed together to orchestrate:
 -The routine setup, teardown, and maintenance of a single resource or multiple connected resources.
 -The deployment of an entire infrastructure, which might contain dozens or hundreds of resources, from imperative code.

4. The Azure CLI:
 The Azure CLI command-line interface is an executable program with which a developer, DevOps professional, or IT professional can execute commands in Bash.
 The primary difference is the syntax you use.

5. ARM templates
 By using Azure Resource Manager templates (ARM templates), you can describe the resources you want to use in a declarative JSON format. The benefit is that the entire ARM template is
  verified before any code is executed to ensure that the resources will be created and connected correctly. The template then orchestrates the creation of those resources in parallel.
 The developer, DevOps professional, or IT professional needs only to define the desired state and configuration of each resource in the ARM template, and the template does the rest.
  Templates can even execute PowerShell and Bash scripts before or after the resource has been set up.


Decision criteria:
1. Do you need to perform one-off management, administrative, or reporting actions? PowerShell, Azure CLI scripts, or the Azure portal.
2. Do you need a way to repeatedly set up one or more resources and ensure that all the dependencies are created in the proper order? ARM templates.
3. When you're scripting, do you come from a Windows administration or Linux administration background? PowerShell-Azure CLI




Create VM:

az vm create \
  --resource-group learn-ba74b111-7df5-4e62-a870-72a370ea1f25 \
  --name my-vm \
  --image UbuntuLTS \
  --admin-username azureuser \
  --generate-ssh-keys



Run apt-get update, Install NGINX and Set the home page, /var/www/html/index.html:

az vm extension set \
  --resource-group learn-ba74b111-7df5-4e62-a870-72a370ea1f25 \
  --vm-name my-vm \
  --name customScript \
  --publisher Microsoft.Azure.Extensions \
  --version 2.1 \
  --settings '{"fileUris":["https://raw.githubusercontent.com/MicrosoftDocs/mslearn-welcome-to-azure/master/configure-nginx.sh"]}' \
  --protected-settings '{"commandToExecute": "./configure-nginx.sh"}'



Get your VM's IP address and store the result as a Bash variable:

IPADDRESS="$(az vm list-ip-addresses \
  --resource-group learn-ba74b111-7df5-4e62-a870-72a370ea1f25 \
  --name my-vm \
  --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" \
  --output tsv)"

echo $IPADDRESS





