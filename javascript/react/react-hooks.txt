useLayoutEffect()

React.memo( component )

const memoProcess = useMemo(() => myFunction(params), [motivos para relanzar]);

useCallback usar con React.memo()
const increment = useCallback(() => setCounter(c => c + 1), [setCounter]);


#################################################################################################################################

|| Reducer ||

const initialState = [{...}];

const taskReducer = (state = initialState, action) => {
    if (action?.type === "addTask") {
	return [...state, action.payload];
    }
    return state;
}

const tasks = taskReducer();    // initialize
console.log(tasks)

const addTaskAction = {
    type: "addTask",
    payload: {...}
}

tasks = taskReducer(tasks, addTaskAction);

console.log(tasks)


#################################################################################################################################

|| useReducer ||

export const AppComponent = () => {
    const [tasks, dispatch] = useReducer(taskReducer, initialState);

    const handleSubmit = (e) => {
	e.preventDefault();
	const action = {
	    type: 'addTask',
	    payload: {...}
	}
	dispatch(action);
    }



