Los proyectos se abren desde el archivo de configuración    proyecto.sln    ("solución")

Modulizar:
Usar    namespace NombreNS { (Clase) }
Importar haciendo    using NombreNS

Agregar Excel: Proyecto/agregar referencias   COM/ búsqueda ... Microsoft Excel 16.0 Object Library

try {} catch {MessageBox.Show("No se han ingresado productos");}

ícono:   agregar y asociar al proyecto desde    Proyecto/Propiedades de ...

Firma digital: También en Proyecto/Propiedades de ...   Firma

.env files:   NuGet ... DotNetEnv   (https://github.com/tonerdo/dotnet-env)    ver la doc ahí
using System;     string UserID = Environment.GetEnvironmentVariable("USERNAMEDB")


#################################################################################################################################

SQL SERVER

Tools/Connect to DB

Select Project > Manage NuGet Packages.
In NuGet Package Manager, select the Browse tab, then search for and select Microsoft.Data.SqlClient.
On the Microsoft.Data.SqlClient page, select Install.

...

try 
{ 
    SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();
    builder.DataSource = "<your_server>.database.windows.net"; 
    builder.UserID = "<your_username>";            
    builder.Password = "<your_password>";     
    builder.InitialCatalog = "<your_database>";

    using (SqlConnection connection = new SqlConnection(builder.ConnectionString))
    {
        Console.WriteLine("\nQuery data example:");
        Console.WriteLine("=========================================\n");

        String sql = "SELECT name, collation_name FROM sys.databases";

        using (SqlCommand command = new SqlCommand(sql, connection))
        {
            connection.Open();
            using (SqlDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                    {
                        Console.WriteLine("{0} {1}", reader.GetString(0), reader.GetString(1));
                    }
            }
        }                    
    }
}
catch (SqlException e)
{
    Console.WriteLine(e.ToString());
}


new SqlCommand(sql, connection).ExecuteNonQuery();
MessageBox.Show("Los datos se guardaron correctamente");
connection.Close();


#################################################################################################################################

instalo sdk .net core 3.1
The following were installed at: 'C:\Program Files\dotnet'
    • .NET Core SDK 3.1.404
    • .NET Core Runtime 3.1.10
    • ASP.NET Core Runtime 3.1.10
    • .NET Core Windows Desktop Runtime 3.1.10

dotnet --version

Projecto de terminal:    dotnet new console -o myConsoleApp
Ejecutar:                dotnet restore    dotnet run

Proyecto app:            dotenv new mvc -au None -o aspnet-app          (sin auth)
Ejecutar:                dotnet restore    dotnet run                   (puerto 5000)


dotnet add package Newtonsoft.Json           parsear json


#################################################################################################################################

Curso de [Code Skills]

Add Project ASP.NET Core Web App "SocialMedia.Api"
Add Project ASP.NET Core Web App "SocialMedia.Infrastructure"
Add Project Class Library (.NET Standard) "SocialMedia.Core"

Click en .Api / Add Project Reference
    activar los checkboxes para relacionar el primero con los otros dos (el primero dirige por haberse creado primero)
Click en .Infrastructure / Add Project Reference , solo con el Core
Core es el nivel más interno, no tiene referencias

Crea carpeta Tests por fuera de los 3 projectos con 2 proyectos xUnitTests

// código //

View / SQL Server Object Explorer     click derecho en Databases / Add New Database
click derecho / New Query

Instalar Gnu Package    Microsoft.EntityFrameworkCore.SqlServer 3.1.11    en .Infrastructure
			Microsoft.EntityFrameworkCore.SqlServer 3.1.11    en .Infrastructure    estos tienen problemas de compatibilidad con NETStandard.Library
                        Microsoft.EntityFrameworkCore.Design 3.1.11       en .Api

Tools / GnuGet Package Manager / Package Manager Console    (ver que la pestaña Default Project diga Infrastructure)
	ejecutar:    Scaffold-DbContext "Server=(localdb)\MSSQLLocalDB;Database=SocialMedia;Integrated Security = true" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Data

, genera todo desde la base de datos

El método "OnConfiguring" del Context.cs se elimina para que no quede expuesto, y preferentemente se lo inyecta
Las otras clases las llevo al Entities del Core (usar copy and paste desde VS y cambiar los namespaces)

En appsettings.json agregar "ConnectionStrings": {
    "SocialMedia": "Server=(localdb)\\MSSQLLocalDB;Database=SocialMedia;Integrated Security = true"
},

Función rename de VS: selección, ctrl + r + r

DTO: data transfer objects, evitar que los usuarios decidan todos los valores de los objetos
Son clases similares a las Entities pero sin referencias a otras tablas y las conversiones pertinentes
El manejo de las dbs se hace con Entities pero la ruta usa DTO (los controllers)

Instalo Microsoft.AspNetCore.Mvc.NewtonsoftJson 3.1.11   (hacer coincidir con la versión del framework)
Ignorar referencia circular en Startup.cs

Instalo    AutoMapper.Extensions.Microsoft.DependencyInjection    para automatizar las conversiones (carpeta Mappings)
También instalo    AutoMapper.Extensions.Microsoft.DependencyInject


Validación de datos que ingresan:    if (!ModelState.IsValid) {return BadRequest(ModelState);}
     desconectando la validación de [ApiController]   en Startup.cs   (ConfigureApiBehaviorOptions ... SuppressModelStateInvalidFilter)
Instalar    Microsoft.AspNetCore.Mvc.Abstractions 2.2.0    Microsoft.AspNetCore.Mvc.Core 2.2.5

Agregar la validación como middleware (Startup.cs)







