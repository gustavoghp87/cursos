#################################################################################################################################
ON-MEMORY
#################################################################################################################################

dotnet add package Microsoft.EntityFrameworkCore.InMemory    base de datos en memoria para pruebas



#################################################################################################################################
DATABASE FIRST - USANDO SCAFFOLD
#################################################################################################################################


Scaffold-DBContext "Server=localhost; Database=ScaneApp; User=ghp2; Password=ghpghpghpghp;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models

Eligiendo algunas tablas en vez de todas:
Scaffold-DBContext "Server=localhost; Database=ScaneApp; User=ghp2; Password=ghpghpghpghp;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Tables "Users" (-Force si falla)

Rehacer modelos y context después de cambiar la DB:	(ver que no hay nada en error)
Scaffold-DBContext "Server=localhost; Database=ScaneApp; User=ghp2; Password=ghpghpghpghp;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Force


#################################
SCAFFOLDING MVC COMPLETO
#################################

Crea modelos, vistas y controladores desde un puñado de instrucciones de terminal

dotnet tool install -g dotnet-aspnet-codegenerator
dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet restore

dotnet aspnet-codegenerator controller`
-name EvaluaciónController `                          CursoController etc
-m Evaluación`                                       Alumno, Curso, Asignatura, Escuela, Evaluación
-dc EscuelaContext `
--relativeFolderPath Controllers `
--useDefaultLayout `
--referenceScriptLibraries -f                     f de forzar (reemplazar)

dotnet aspnet-codegenerator controller -name EvaluaciónController -m Evaluación -dc EscuelaContext --relativeFolderPath Controllers --useDefaultLayout --referenceScriptLibraries -f




#################################################################################################################################
CODE FIRST - USANDO MIGRATIONS
#################################################################################################################################

Instalar    Microsoft.EntityFrameworkCore
Instalar    Microsoft.EntityFrameworkCore.SqlServer               dotnet add package Microsoft.EntityFrameworkCore.SqlServer
Instalar    Microsoft.EntityFrameworkCore.Tools
 y en la consola de NuGet:	Add-Migration InitialCreate       para que se creen las clases Migration


Agregar a appsettings.json:
  "ConnectionStrings": {
    "DefaultConnectionString": "Server=localhost;Initial Catalog=AngularDotnet;Persist Security Info=False;User ID=ghp2;Password=ghpghpghpghp;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;"
  }

Y a Startup.cs en ConfigureServices:
	string connection = ConfigurationExtensions.GetConnectionString(this.Configuration, "DefaultConnectionString");
        services.AddDbContext<MyDBContext>(options => options.UseSqlServer(connection));

Ahora desde la consola de NuGet:
	Update-Database                   para que se cree una DB desde los modelos








Se crea el ModeloContext.cs y se lo inyecta en el Startup.cs en el ConfigureServices (base de datos en memoria o sql)
En Program.cs evitar que la app se inicie antes


