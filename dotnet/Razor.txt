<button @onclick="Metodo"> Click </button>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

@foreach(...){...}

Para usar otro template:
@{
    ViewData["Title"] = "School Page";
    Layout = "_LayoutSimple";
}

Para usar tipado fuerte (cshtml):   @model School

@Html.LabelFor(d => d.Name)
@Html.TextBoxFor(d => d.Name, "", new { @class = "form-control" })
@Html.ValidationMessageFor(d => d.Name, "", new { @class = "text-danger" })


<form asp-action="Create">                     (full stack)
    Name <input asp-for="Name" />
    <span asp-validation-for="Name"></span>
</form>


<input @bind="userInput" />




#################################################################################################################################
	BLAZOR
#################################################################################################################################

Usar    @page "/clients"    y se evitan los controladores, se crean los objetos abajo en @code {}
@page "/clients/{Id:int}"

Url base:    services.AddSingleton(new HttpClient { BaseAddress = new Uri("https://localhost:44382") }; )

@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavManager


var response = await Http.PostAsJsonAsync<Model>(url, modelModel);
response.Content.ReadFromJsonAsync<ResponseModel>().Result;
NavManager.NavigateTo("/otherPage");


protected override async Task OnInitializedAsync() {}


<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
	<NavLink class="nav-link" href="other" Match="NavLinkMatch.All"> <span

<EditForm Model="@modelModel">
    <InputText @bind-Value="modelModel.Name" />

