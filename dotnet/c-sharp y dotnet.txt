DOTNET

Los proyectos se abren desde el archivo de configuración    proyecto.sln    ("solución")

Modulizar:
Usar    namespace NombreNS { (Clase) }
Importar haciendo    using NombreNS

Agregar Excel: Proyecto/agregar referencias   COM/ búsqueda ... Microsoft Excel 16.0 Object Library

try {} catch {MessageBox.Show("No se han ingresado productos");}

ícono:   agregar y asociar al proyecto desde    Proyecto/Propiedades de ...

Firma digital: También en Proyecto/Propiedades de ...   Firma


.env files:   NuGet ... DotNetEnv   (https://github.com/tonerdo/dotnet-env)    ver la doc ahí
using System;     string UserID = Environment.GetEnvironmentVariable("USERNAMEDB")


Par clave-valor en C#:    Dictionary<string, int> dict = new Dictionary<string, int>();

Printer.WriteTitle("Título");
foreach (var keyValPair in dict)
{
    WriteLine($"La llave de {keyValPair.Key} vale {keyValPair.Value}");
}

dict["email"] arroja el valor en esa llave

dict["lastname"] = "Garcia";    asigna

Hacer un tipo de JSON y evitar que se asignen llaves equivocadas:    public enum LlavesDiccionario {Llave1, Llave2, Llave3}
Uso:    var diccionario = new Dictionary<LlavesDiccionario, IEnumerable<ObjetoDado>();
        diccionario.Add(LlavesDiccionario.Llave1, new[] {Tipo});

virtual habilita la sobreescritura de parámetros, el que sobreescribe lleva override
[Required]
[Required(ErrorMessage = "El nombre del curso es requerido")]
[StringLength(10)]
[StringLength(10, ErrorMessage = "Se requiren mínimo 10 caracteres")]
[Display(Prompt = "Dirección correspondencia", Name = "Address")]          Promp es placeholder y Name es tabel

Crear Interface usando la clase actual como modelo: ctrl + r,i


using System.Linq
...
IEnumerable<int> list = from d in arreglo orderby d select d;                              ordena de menor a mayor
IEnumerable<int> list = from d in arreglo orderby d select d;
IEnumerable<Object> list = from d in arreglo orderby d.AtributoInt select d;
Object obj = (from d in arreglo where d.Atributo=="atributo" select d).FirstOrDefault();

var numbers1 = new int[] { 1, 2, 3, 4, 5, 6, 7 };
var numbers2 = new int[] { 6, 7, 8, 9, 10 };
var numbersUnion = numbers1.Union(numbers2).ToList();      no repite

ver Zip, Join, All, SelectMany

