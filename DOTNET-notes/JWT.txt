
Install    Microsoft.ApsNetCore.Authentication.JwtBearer    y    System.IdentityModel.Tokens.Jwt

Startup:

            // JWT   ConfigureServices
            var appSettingsSection = Configuration.GetSection("AppSettings");
            services.Configure<ProjectAppSettings>(appSettingsSection);
            var appSettings = appSettingsSection.Get<ProjectAppSettings>();
            var key = Encoding.ASCII.GetBytes(appSettings.SecretString);
            services
                .AddAuthentication(x =>
                {
                    x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                    x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                })
                .AddJwtBearer(x =>
                {
                    x.RequireHttpsMetadata = false;
                    x.SaveToken = true;
                    x.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuerSigningKey = true,
                        IssuerSigningKey = new SymmetricSecurityKey(key),
                        ValidateIssuer = false,
                        ValidateAudience = false
                    };
                });


            // JWT   Configure
	    app.UseAuthentication();                 BEFORE    app.UseAuthorization();


Use in UserService:
	Inyectar un objeto    IOptions<ProjectAppSettings> appSettings    en el constructor y asignarlo a un private readonly

        private string GenerateToken(User user)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_appSettings.SecretString);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[] {
                    new Claim(ClaimTypes.NameIdentifier, user.UserId.ToString()),
                    new Claim(ClaimTypes.Email, user.Email.ToString()),
                }),
                Expires = DateTime.UtcNow.AddDays(60),
                SigningCredentials = new SigningCredentials(
                    new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature
                )
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            var tokenString = tokenHandler.WriteToken(token);
            return tokenString;
        }


Agregar    [Authorize]    al encabezado del ClientController para que no pueda acceder a los mÃ©todos los users no autenticados


#################################################################################################################################

Service:

public UserResponse Auth(AuthRequest model)
{
    UserResponse userResponse = new();
    using (var context = new ScaneAppContext())
    {
        string encryptedPsw = Encrypt.GetSHA256(model.Password);
        var user = context.Users.Where(x => x.Email == model.Email && x.Password == encryptedPsw).FirstOrDefault();
        if (user == null) return null;
        userResponse.Email = user.Email;
        userResponse.Token = GenerateToken(user);
    }
    return userResponse;
}

private string GenerateToken(User user)
{
    var tokenHandler = new JwtSecurityTokenHandler();
    var key = Encoding.ASCII.GetBytes(_appSettings.SecretString);
    var tokenDescriptor = new SecurityTokenDescriptor
    {
        Subject = new ClaimsIdentity(new Claim[] {
            new Claim(ClaimTypes.NameIdentifier, user.UserId.ToString()),
            new Claim(ClaimTypes.Email, user.Email.ToString()),
        }),
        Expires = DateTime.UtcNow.AddDays(60),
        SigningCredentials = new SigningCredentials(
            new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature
        )
    };
    var token = tokenHandler.CreateToken(tokenDescriptor);
    var tokenString = tokenHandler.WriteToken(token);
    return tokenString;
}

private static string GetSHA256(string str)
{
    SHA256 sha256 = SHA256Managed.Create();
    ASCIIEncoding encoding = new ASCIIEncoding();
    byte[] stream = null;
    StringBuilder sb = new StringBuilder();
    stream = sha256.ComputeHash(encoding.GetBytes(str));
    for (int i = 0; i < stream.Length; i++) sb.AppendFormat("{0:x2}", stream[i]);
    return sb.ToString();
}